# app.py
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from data_loader import DataLoader
from feature_engineering import FeatureEngineer

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Predicci√≥n Agr√≠cola",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #2E8B57;
        text-align: center;
        margin-bottom: 2rem;
    }
    .prediction-card {
        background-color: #f0f8f0;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 5px solid #2E8B57;
        margin: 1rem 0;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        border: 1px solid #dee2e6;
    }
</style>
""", unsafe_allow_html=True)


class AgriculturalApp:
    def __init__(self):
        self.model = None
        self.data_loader = DataLoader()
        self.feature_engineer = FeatureEngineer()
        self.load_data()

    def load_data(self):
        """Carga los datos y el modelo"""
        try:
            # Cargar modelo
            self.model = joblib.load('models/agricultural_production_model.pkl')

            # Cargar datos para visualizaciones
            self.clima_df, self.siembra_df, self.cosecha_df, self.cultivo_df = self.data_loader.load_all_data()

            # Preparar datos combinados para gr√°ficos
            self.prepare_visualization_data()

        except Exception as e:
            st.error(f"Error cargando el modelo o datos: {e}")

    def prepare_visualization_data(self):
        """Prepara datos para visualizaciones"""
        # Combinar datos para an√°lisis
        self.datos_combinados = self.siembra_df.merge(
            self.cosecha_df,
            on=['id_region', 'id_cultivo', 'anio'],
            suffixes=('_siembra', '_cosecha')
        ).merge(
            self.cultivo_df,
            on='id_cultivo'
        )

        # Calcular rendimiento
        self.datos_combinados['rendimiento'] = (
                self.datos_combinados['toneladas'] / self.datos_combinados['hectareas']
        )

    def render_sidebar(self):
        """Renderiza la barra lateral de navegaci√≥n"""
        st.sidebar.title("üå± Navegaci√≥n")
        app_mode = st.sidebar.selectbox(
            "Selecciona una secci√≥n:",
            ["üè† Dashboard", "üìä An√°lisis de Datos", "üîÆ Predicciones", "üìà Tendencias"]
        )

        st.sidebar.markdown("---")
        st.sidebar.info(
            "Sistema de predicci√≥n de producci√≥n agr√≠cola basado en "
            "datos clim√°ticos y de siembra hist√≥ricos."
        )

        return app_mode

    def render_dashboard(self):
        """Renderiza el dashboard principal"""
        st.markdown('<h1 class="main-header">üåæ Dashboard de Producci√≥n Agr√≠cola</h1>', unsafe_allow_html=True)

        # M√©tricas principales
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            total_cosecha = self.datos_combinados['toneladas'].sum()
            st.metric("Producci√≥n Total", f"{total_cosecha:,.0f} ton")

        with col2:
            total_hectareas = self.datos_combinados['hectareas'].sum()
            st.metric("√Årea Sembrada Total", f"{total_hectareas:,.0f} ha")

        with col3:
            rendimiento_promedio = self.datos_combinados['rendimiento'].mean()
            st.metric("Rendimiento Promedio", f"{rendimiento_promedio:.2f} ton/ha")

        with col4:
            cultivos_unicos = self.datos_combinados['nombre_cultivo'].nunique()
            st.metric("Tipos de Cultivo", cultivos_unicos)

        st.markdown("---")

        # Gr√°ficos principales
        col1, col2 = st.columns(2)

        with col1:
            self.render_production_trend()

        with col2:
            self.render_crop_distribution()

        col3, col4 = st.columns(2)

        with col3:
            self.render_yield_by_region()

        with col4:
            self.render_climate_impact()

    def render_production_trend(self):
        """Gr√°fico de tendencia de producci√≥n"""
        st.subheader("üìà Tendencia de Producci√≥n Anual")

        produccion_anual = self.datos_combinados.groupby('anio').agg({
            'toneladas': 'sum',
            'hectareas': 'sum'
        }).reset_index()

        produccion_anual['rendimiento'] = produccion_anual['toneladas'] / produccion_anual['hectareas']

        fig = make_subplots(specs=[[{"secondary_y": True}]])

        fig.add_trace(
            go.Scatter(x=produccion_anual['anio'], y=produccion_anual['toneladas'],
                       name="Producci√≥n (ton)", line=dict(color='#2E8B57', width=3)),
            secondary_y=False,
        )

        fig.add_trace(
            go.Scatter(x=produccion_anual['anio'], y=produccion_anual['rendimiento'],
                       name="Rendimiento (ton/ha)", line=dict(color='#FF6B6B', width=3)),
            secondary_y=True,
        )

        fig.update_layout(
            title="Evoluci√≥n de la Producci√≥n y Rendimiento",
            xaxis_title="A√±o",
            hovermode='x unified',
            height=400
        )

        fig.update_yaxes(title_text="Producci√≥n (ton)", secondary_y=False)
        fig.update_yaxes(title_text="Rendimiento (ton/ha)", secondary_y=True)

        st.plotly_chart(fig, use_container_width=True)

    def render_crop_distribution(self):
        """Gr√°fico de distribuci√≥n de cultivos"""
        st.subheader("ü•¶ Distribuci√≥n de Cultivos")

        cultivo_produccion = self.datos_combinados.groupby('nombre_cultivo').agg({
            'toneladas': 'sum',
            'hectareas': 'sum'
        }).reset_index()

        cultivo_produccion['rendimiento'] = cultivo_produccion['toneladas'] / cultivo_produccion['hectareas']

        fig = px.sunburst(
            cultivo_produccion,
            path=['nombre_cultivo'],
            values='toneladas',
            title="Distribuci√≥n de Producci√≥n por Cultivo",
            color='rendimiento',
            color_continuous_scale='Viridis',
            height=400
        )

        st.plotly_chart(fig, use_container_width=True)

    def render_yield_by_region(self):
        """Gr√°fico de rendimiento por regi√≥n"""
        st.subheader("üèûÔ∏è Rendimiento por Regi√≥n")

        region_rendimiento = self.datos_combinados.groupby('id_region').agg({
            'rendimiento': 'mean',
            'toneladas': 'sum'
        }).reset_index()

        fig = px.bar(
            region_rendimiento,
            x='id_region',
            y='rendimiento',
            title="Rendimiento Promedio por Regi√≥n",
            color='rendimiento',
            color_continuous_scale='Blues',
            height=400
        )

        fig.update_layout(xaxis_title="Regi√≥n", yaxis_title="Rendimiento (ton/ha)")

        st.plotly_chart(fig, use_container_width=True)

    def render_climate_impact(self):
        """Gr√°fico de impacto clim√°tico"""
        st.subheader("üå§Ô∏è An√°lisis Clim√°tico")

        # Agrupar datos clim√°ticos por a√±o
        clima_anual = self.clima_df.groupby('anio').agg({
            'precipitacion': 'mean',
            'temperatura_max': 'mean',
            'temperatura_min': 'mean'
        }).reset_index()

        # Combinar con datos de producci√≥n
        clima_produccion = clima_anual.merge(
            self.datos_combinados.groupby('anio')['rendimiento'].mean().reset_index(),
            on='anio'
        )

        fig = px.scatter(
            clima_produccion,
            x='precipitacion',
            y='rendimiento',
            size='temperatura_max',
            color='temperatura_max',
            title="Relaci√≥n Precipitaci√≥n vs Rendimiento",
            trendline="lowess",
            height=400
        )

        st.plotly_chart(fig, use_container_width=True)

    def render_data_analysis(self):
        """Secci√≥n de an√°lisis de datos"""
        st.title("üìä An√°lisis Exploratorio de Datos")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("Datos de Siembra")
            st.dataframe(
                self.siembra_df.head(100),
                use_container_width=True,
                height=300
            )

            # Resumen estad√≠stico
            st.subheader("Estad√≠sticas de Siembra")
            st.dataframe(self.siembra_df[['hectareas', 'anio']].describe())

        with col2:
            st.subheader("Datos de Cosecha")
            st.dataframe(
                self.cosecha_df.head(100),
                use_container_width=True,
                height=300
            )

            # Resumen estad√≠stico
            st.subheader("Estad√≠sticas de Cosecha")
            st.dataframe(self.cosecha_df[['toneladas', 'anio']].describe())

        st.markdown("---")

        # An√°lisis de correlaci√≥n
        st.subheader("üîç An√°lisis de Correlaciones")

        # Preparar datos para correlaci√≥n
        datos_analisis = self.datos_combinados[['hectareas', 'toneladas', 'rendimiento', 'anio']].copy()

        # Calcular matriz de correlaci√≥n
        corr_matrix = datos_analisis.corr()

        fig = px.imshow(
            corr_matrix,
            text_auto=True,
            aspect="auto",
            color_continuous_scale='RdBu_r',
            title="Matriz de Correlaci√≥n"
        )

        st.plotly_chart(fig, use_container_width=True)

    def render_predictions(self):
        """Secci√≥n de predicciones"""
        st.title("üîÆ Predicci√≥n de Producci√≥n Agr√≠cola")

        st.info("""
        Complete los par√°metros a continuaci√≥n para predecir la producci√≥n agr√≠cola 
        bas√°ndose en las condiciones clim√°ticas y de siembra.
        """)

        # Formulario de entrada
        with st.form("prediction_form"):
            col1, col2 = st.columns(2)

            with col1:
                st.subheader("üìã Par√°metros de Siembra")
                region = st.selectbox(
                    "Regi√≥n",
                    options=sorted(self.siembra_df['id_region'].unique())
                )

                cultivo = st.selectbox(
                    "Cultivo",
                    options=sorted(self.cultivo_df['nombre_cultivo'].unique())
                )

                anio = st.number_input(
                    "A√±o de siembra",
                    min_value=2024,
                    max_value=2030,
                    value=2024
                )

                hectareas = st.number_input(
                    "Hect√°reas sembradas",
                    min_value=1.0,
                    max_value=10000.0,
                    value=100.0,
                    step=10.0
                )

            with col2:
                st.subheader("üå§Ô∏è Condiciones Clim√°ticas Esperadas")

                precip_total = st.slider(
                    "Precipitaci√≥n total anual (mm)",
                    min_value=0.0,
                    max_value=2000.0,
                    value=800.0,
                    step=50.0
                )

                temp_max_promedio = st.slider(
                    "Temperatura m√°xima promedio (¬∞C)",
                    min_value=10.0,
                    max_value=40.0,
                    value=25.0,
                    step=1.0
                )

                temp_min_promedio = st.slider(
                    "Temperatura m√≠nima promedio (¬∞C)",
                    min_value=0.0,
                    max_value=25.0,
                    value=12.0,
                    step=1.0
                )

                dias_helada = st.slider(
                    "D√≠as con helada esperados",
                    min_value=0,
                    max_value=100,
                    value=5
                )

            # Bot√≥n de predicci√≥n
            submitted = st.form_submit_button("üéØ Predecir Producci√≥n", use_container_width=True)

            if submitted:
                self.make_prediction(
                    region, cultivo, anio, hectareas,
                    precip_total, temp_max_promedio, temp_min_promedio, dias_helada
                )

    def make_prediction(self, region, cultivo, anio, hectareas, precip_total,
                        temp_max_promedio, temp_min_promedio, dias_helada):
        """Realiza la predicci√≥n y muestra resultados"""
        try:
            # Preparar datos de entrada
            input_data = self.prepare_prediction_input(
                region, cultivo, anio, hectareas,
                precip_total, temp_max_promedio, temp_min_promedio, dias_helada
            )

            # Realizar predicci√≥n
            prediction = self.model['model'].predict(
                self.model['scaler'].transform(input_data)
            )[0]

            # Calcular rendimiento
            rendimiento = prediction / hectareas

            # Mostrar resultados
            st.markdown("---")
            st.markdown('<div class="prediction-card">', unsafe_allow_html=True)

            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric(
                    "Producci√≥n Predicha",
                    f"{prediction:,.2f} ton",
                    delta=f"Rendimiento: {rendimiento:.2f} ton/ha"
                )

            with col2:
                st.metric("√Årea Sembrada", f"{hectareas:,.1f} ha")

            with col3:
                st.metric("Cultivo", cultivo)

            st.markdown('</div>', unsafe_allow_html=True)

            # Gr√°fico de resultados
            self.render_prediction_charts(prediction, rendimiento, hectareas)

        except Exception as e:
            st.error(f"Error en la predicci√≥n: {e}")

    def prepare_prediction_input(self, region, cultivo, anio, hectareas,
                                 precip_total, temp_max_promedio, temp_min_promedio, dias_helada):
        """Prepara los datos de entrada para la predicci√≥n"""
        # Obtener ID del cultivo
        cultivo_id = self.cultivo_df[
            self.cultivo_df['nombre_cultivo'] == cultivo
            ]['id_cultivo'].iloc[0]

        # Crear DataFrame base
        input_df = pd.DataFrame({
            'id_region': [region],
            'id_cultivo': [cultivo_id],
            'anio': [anio],
            'hectareas': [hectareas],
            'nombre_cultivo': [cultivo]
        })

        # Usar el feature engineer para crear todas las caracter√≠sticas
        # Nota: En una implementaci√≥n real, necesitar√≠as calcular caracter√≠sticas clim√°ticas m√°s detalladas
        training_data = self.feature_engineer.prepare_training_data(
            self.clima_df,
            pd.DataFrame([{
                'id_siembra': 1,
                'id_region': region,
                'id_cultivo': cultivo_id,
                'hectareas': hectareas,
                'anio': anio
            }]),
            pd.DataFrame([{
                'id_region': region,
                'id_cultivo': cultivo_id,
                'toneladas': 0,  # Placeholder
                'anio': anio
            }]),
            self.cultivo_df
        )

        X, _ = self.feature_engineer.create_feature_matrix(training_data)

        return X

    def render_prediction_charts(self, prediction, rendimiento, hectareas):
        """Renderiza gr√°ficos para los resultados de predicci√≥n"""
        col1, col2 = st.columns(2)

        with col1:
            # Gr√°fico de comparaci√≥n con promedio hist√≥rico
            rendimiento_promedio = self.datos_combinados['rendimiento'].mean()

            fig = go.Figure()

            fig.add_trace(go.Indicator(
                mode="gauge+number+delta",
                value=rendimiento,
                delta={'reference': rendimiento_promedio},
                gauge={
                    'axis': {'range': [None, max(rendimiento * 1.5, rendimiento_promedio * 1.5)]},
                    'steps': [
                        {'range': [0, rendimiento_promedio], 'color': "lightgray"},
                        {'range': [rendimiento_promedio, rendimiento_promedio * 1.5], 'color': "gray"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': rendimiento_promedio
                    }
                },
                title={'text': "Rendimiento vs Promedio Hist√≥rico"}
            ))

            st.plotly_chart(fig, use_container_width=True)

        with col2:
            # Gr√°fico de desglose
            labels = ['Producci√≥n Esperada', '√Årea No Productiva']
            values = [prediction, hectareas * rendimiento - prediction]

            fig = px.pie(
                values=values,
                names=labels,
                title="Distribuci√≥n de Producci√≥n Esperada",
                color=labels,
                color_discrete_map={
                    'Producci√≥n Esperada': '#2E8B57',
                    '√Årea No Productiva': '#FF6B6B'
                }
            )

            st.plotly_chart(fig, use_container_width=True)

    def render_trends(self):
        """Secci√≥n de an√°lisis de tendencias"""
        st.title("üìà An√°lisis de Tendencias y Proyecciones")

        st.warning("""
        Esta secci√≥n utiliza datos hist√≥ricos para identificar tendencias 
        y realizar proyecciones futuras. Las predicciones son estimaciones 
        basadas en patrones hist√≥ricos.
        """)

        # Selectores para an√°lisis
        col1, col2, col3 = st.columns(3)

        with col1:
            cultivo_tendencia = st.selectbox(
                "Selecciona cultivo para an√°lisis:",
                options=sorted(self.cultivo_df['nombre_cultivo'].unique()),
                key="cultivo_trend"
            )

        with col2:
            region_tendencia = st.selectbox(
                "Selecciona regi√≥n:",
                options=sorted(self.siembra_df['id_region'].unique()),
                key="region_trend"
            )

        with col3:
            metricas = st.selectbox(
                "M√©trica a analizar:",
                ["Producci√≥n", "Rendimiento", "√Årea Sembrada"]
            )

        # Gr√°fico de tendencia
        self.render_trend_analysis(cultivo_tendencia, region_tendencia, metricas)

        # Proyecci√≥n futura
        st.subheader("üî≠ Proyecci√≥n para Pr√≥ximos A√±os")

        anos_proyeccion = st.slider(
            "A√±os a proyectar:",
            min_value=1,
            max_value=10,
            value=5
        )

        if st.button("Generar Proyecci√≥n", use_container_width=True):
            self.render_projection(cultivo_tendencia, region_tendencia, anos_proyeccion)

    def render_trend_analysis(self, cultivo, region, metrica):
        """Renderiza an√°lisis de tendencias"""
        # Filtrar datos
        cultivo_id = self.cultivo_df[
            self.cultivo_df['nombre_cultivo'] == cultivo
            ]['id_cultivo'].iloc[0]

        datos_filtrados = self.datos_combinados[
            (self.datos_combinados['id_region'] == region) &
            (self.datos_combinados['id_cultivo'] == cultivo_id)
            ]

        if datos_filtrados.empty:
            st.warning("No hay datos suficientes para el an√°lisis de tendencias con los filtros seleccionados.")
            return

        # Seleccionar m√©trica
        if metrica == "Producci√≥n":
            columna = 'toneladas'
            titulo = f"Tendencia de Producci√≥n - {cultivo}"
        elif metrica == "Rendimiento":
            columna = 'rendimiento'
            titulo = f"Tendencia de Rendimiento - {cultivo}"
        else:
            columna = 'hectareas'
            titulo = f"Tendencia de √Årea Sembrada - {cultivo}"

        fig = px.scatter(
            datos_filtrados,
            x='anio',
            y=columna,
            trendline="lowess",
            title=titulo,
            size='toneladas',
            color='rendimiento',
            height=500
        )

        st.plotly_chart(fig, use_container_width=True)

    def render_projection(self, cultivo, region, anos_proyeccion):
        """Renderiza proyecci√≥n futura"""
        # Aqu√≠ ir√≠a la l√≥gica para proyecciones m√°s sofisticadas
        # Por ahora, mostramos un gr√°fico placeholder

        st.info("""
        ‚ö†Ô∏è Las proyecciones mostradas son estimaciones basadas en tendencias hist√≥ricas 
        y no consideran cambios clim√°ticos extremos o eventos imprevistos.
        """)

        # Placeholder para proyecci√≥n
        fig = go.Figure()

        fig.add_trace(go.Scatter(
            x=[2023, 2024, 2025, 2026, 2027],
            y=[100, 120, 115, 130, 125],
            mode='lines+markers',
            name='Proyecci√≥n',
            line=dict(dash='dash', color='orange')
        ))

        fig.update_layout(
            title=f"Proyecci√≥n de Producci√≥n - {cultivo}",
            xaxis_title="A√±o",
            yaxis_title="Producci√≥n (ton)",
            height=400
        )

        st.plotly_chart(fig, use_container_width=True)


def main():
    # Inicializar la aplicaci√≥n
    app = AgriculturalApp()

    # Renderizar navegaci√≥n
    app_mode = app.render_sidebar()

    # Renderizar secci√≥n seleccionada
    if app_mode == "üè† Dashboard":
        app.render_dashboard()
    elif app_mode == "üìä An√°lisis de Datos":
        app.render_data_analysis()
    elif app_mode == "üîÆ Predicciones":
        app.render_predictions()
    elif app_mode == "üìà Tendencias":
        app.render_trends()


if __name__ == "__main__":
    main()